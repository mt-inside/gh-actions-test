name: release

# fixme: running on non-tag pushes, getting confused
on:
  push:
    tags: # all tags. Including lightweight (it's convention to make GH Releases on annotated tags, but it supports both)
      - '*'

# Note the commits operated on are based from GITHUB_REF, but I think we could just use `git describe` becuase I'm sure the repo is checked out to that point. eg
#   git for-each-ref --count=1 --sort='-*authordate' --format='%(*refname:short)' 'refs/tags'
#   git describe --abbrev=0 --tags $(git describe --tags --abbrev=0)^

jobs:
  make_release:
    name: Make Release
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Build
        run: zip --junk-paths example src/*yaml README.md

      - name: Get previous tag
        id: get_previous_tag
        run: echo "::set-output name=tag::$(git describe --abbrev=0 --tags ${GITHUB_REF#refs/tags/}^)" # gets the tag before the given ref, which by definition is the most recent tag, which triggered us. --tags includes lightweight tags, because we'll get triggered for them so shouldn't ignore them or we'll get counterintuitive results

      - name: Make changelog
        id: changelog
        uses: mt-inside/generate-changelog@1a10074
        with:
          new: ${{ github.ref }}
          old: ${{ steps.get_previous_tag.outputs.tag }}
        env:
          GITHUB_AUTH: ${{ github.token }} # Takes via env cause it's a thin wrapper of lerna, which is a bit shit. Re-write in TS and monads

      - name: Make release
        id: make_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref }} # Guarenteed to be a tag cause by definion we're on one
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: false
          draft: true

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.make_release.outputs.upload_url }}
          asset_path: ./example.zip
          asset_name: example.zip
          asset_content_type: application/zip

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: mtinside
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Make and push Docker image
        uses: docker/build-push-action@v2 # uses /Dockerfile unless overridden
        with:
          # registry: docker.pkg.github.com # github packages isn't the most widely used registry, but this avoids docker-hub credentials management
          # repository: ${{ github.repository }}/example # docker run docker.pkg.github.com/mt-inside/gh-actions-test/example:vX.X.X
          # tag_with_ref: true
            #username: ${{ github.actor }}
            #password: ${{ secrets.GITHUB_TOKEN }}
          push: true
          tags: |
            docker.io/mtinside/example:latest
            ghcr.io/${{ github.repository }}/example:latest
